Terminals which are not used

   TOK_ROOT
   TOK_FIELD
   TOK_DECLID
   TOK_INDEX
   TOK_POS
   TOK_NEG
   TOK_CALL
   TOK_NEWARRAY
   TOK_NEWSTRING
   TOK_IFELSE
   TOK_RETURNVOID
   TOK_BLOCK
   TOK_VARDECL
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_INITDECL


Rules never reduced

   32 blockstart: '{'


State 30 conflicts: 26 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: structbase '}'

    9 structbase: structbase fielddecl
   10           | TOK_STRUCT TOK_IDENT '{'

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT ';'
   12          | basetype TOK_IDENT ';'

   13 basetype: TOK_VOID
   14         | TOK_BOOL
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_TYPEID
   19         | TOK_IDENT

   20 function: identdecl funcstart ')' block
   21         | identdecl funcstart ')' ';'
   22         | identdecl '(' ')' block
   23         | identdecl '(' ')' ';'

   24 funcstart: '(' identdecl
   25          | funcstart ',' identdecl

   26 identdecl: basetype TOK_ARRAY TOK_IDENT
   27          | basetype TOK_IDENT

   28 block: blockstart '}'
   29      | '{' '}'

   30 blockstart: blockstart statement
   31           | '{' statement
   32           | '{'

   33 statement: block
   34          | vardecl
   35          | while
   36          | ifelse
   37          | return
   38          | expr ';'
   39          | ';'

   40 vardecl: identdecl '=' expr ';'

   41 while: TOK_WHILE '(' expr ')' statement

   42 ifelse: TOK_IF '(' expr ')' statement
   43       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   44 return: TOK_RETURN ';'
   45       | TOK_RETURN expr ';'

   46 expr: unop
   47     | binop
   48     | allocator
   49     | call
   50     | '(' expr ')'
   51     | variable
   52     | constant

   53 unop: '+' expr
   54     | '-' expr
   55     | '!' expr
   56     | TOK_CHR expr
   57     | TOK_ORD expr

   58 binop: expr '+' expr
   59      | expr '-' expr
   60      | expr '*' expr
   61      | expr '/' expr
   62      | expr '=' expr
   63      | expr '%' expr
   64      | expr TOK_LT expr
   65      | expr TOK_LE expr
   66      | expr TOK_GT expr
   67      | expr TOK_GE expr
   68      | expr TOK_EQ expr
   69      | expr TOK_NE expr

   70 allocator: TOK_NEW TOK_IDENT '(' ')'
   71          | TOK_NEW TOK_STRING '(' expr ')'
   72          | TOK_NEW basetype '[' expr ']'

   73 call: TOK_IDENT '(' ')'
   74     | callbase ')'

   75 callbase: TOK_IDENT '(' expr
   76         | callbase ',' expr

   77 variable: TOK_IDENT
   78         | expr '.' TOK_IDENT
   79         | expr '[' expr ']'

   80 constant: TOK_INTCON
   81         | TOK_CHARCON
   82         | TOK_STRINGCON
   83         | TOK_TRUE
   84         | TOK_FALSE
   85         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 55
'%' (37) 63
'(' (40) 22 23 24 41 42 43 50 70 71 73 75
')' (41) 20 21 22 23 41 42 43 50 70 71 73 74
'*' (42) 60
'+' (43) 53 58
',' (44) 25 76
'-' (45) 54 59
'.' (46) 78
'/' (47) 61
';' (59) 6 11 12 21 23 38 39 40 44 45
'=' (61) 40 62
'[' (91) 72 79
']' (93) 72 79
'{' (123) 10 29 31 32
'}' (125) 5 8 28 29
error (256) 5 6
TOK_VOID (258) 13
TOK_BOOL (259) 14
TOK_CHAR (260) 15
TOK_INT (261) 16
TOK_STRING (262) 17 71
TOK_IF (263) 42 43
TOK_ELSE (264) 43
TOK_WHILE (265) 41
TOK_RETURN (266) 44 45
TOK_STRUCT (267) 10
TOK_FALSE (268) 84
TOK_TRUE (269) 83
TOK_NULL (270) 85
TOK_NEW (271) 70 71 72
TOK_ARRAY (272) 11 26
TOK_EQ (273) 68
TOK_NE (274) 69
TOK_LT (275) 64
TOK_LE (276) 65
TOK_GT (277) 66
TOK_GE (278) 67
TOK_IDENT (279) 10 11 12 19 26 27 70 73 75 77 78
TOK_INTCON (280) 80
TOK_CHARCON (281) 81
TOK_STRINGCON (282) 82
TOK_ROOT (283)
TOK_FIELD (284)
TOK_DECLID (285)
TOK_TYPEID (286) 18
TOK_INDEX (287)
TOK_POS (288)
TOK_NEG (289)
TOK_CALL (290)
TOK_NEWARRAY (291)
TOK_NEWSTRING (292)
TOK_IFELSE (293)
TOK_RETURNVOID (294)
TOK_BLOCK (295)
TOK_VARDECL (296)
TOK_FUNCTION (297)
TOK_PARAMLIST (298)
TOK_PROTOTYPE (299)
TOK_INITDECL (300)
TOK_ORD (301) 57
TOK_CHR (302) 56


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
start (65)
    on left: 1, on right: 0
program (66)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (67)
    on left: 8, on right: 2
structbase (68)
    on left: 9 10, on right: 8 9
fielddecl (69)
    on left: 11 12, on right: 9
basetype (70)
    on left: 13 14 15 16 17 18 19, on right: 11 12 26 27 72
function (71)
    on left: 20 21 22 23, on right: 3
funcstart (72)
    on left: 24 25, on right: 20 21 25
identdecl (73)
    on left: 26 27, on right: 20 21 22 23 24 25 40
block (74)
    on left: 28 29, on right: 20 22 33
blockstart (75)
    on left: 30 31 32, on right: 28 30
statement (76)
    on left: 33 34 35 36 37 38 39, on right: 4 30 31 41 42 43
vardecl (77)
    on left: 40, on right: 34
while (78)
    on left: 41, on right: 35
ifelse (79)
    on left: 42 43, on right: 36
return (80)
    on left: 44 45, on right: 37
expr (81)
    on left: 46 47 48 49 50 51 52, on right: 38 40 41 42 43 45 50 53
    54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 71 72 75 76 78
    79
unop (82)
    on left: 53 54 55 56 57, on right: 46
binop (83)
    on left: 58 59 60 61 62 63 64 65 66 67 68 69, on right: 47
allocator (84)
    on left: 70 71 72, on right: 48
call (85)
    on left: 73 74, on right: 49
callbase (86)
    on left: 75 76, on right: 74 76
variable (87)
    on left: 77 78 79, on right: 51
constant (88)
    on left: 80 81 82 83 84 85, on right: 52


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    ';'            shift, and go to state 29
    '{'            shift, and go to state 30

    $end  reduce using rule 1 (start)

    structdef   go to state 31
    structbase  go to state 32
    basetype    go to state 33
    function    go to state 34
    identdecl   go to state 35
    block       go to state 36
    blockstart  go to state 37
    statement   go to state 38
    vardecl     go to state 39
    while       go to state 40
    ifelse      go to state 41
    return      go to state 42
    expr        go to state 43
    unop        go to state 44
    binop       go to state 45
    allocator   go to state 46
    call        go to state 47
    callbase    go to state 48
    variable    go to state 49
    constant    go to state 50


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 51
    ';'  shift, and go to state 52


state 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


state 6

   14 basetype: TOK_BOOL .

    $default  reduce using rule 14 (basetype)


state 7

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


state 8

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


state 9

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


state 10

   42 ifelse: TOK_IF . '(' expr ')' statement
   43       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 53


state 11

   41 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 54


state 12

   44 return: TOK_RETURN . ';'
   45       | TOK_RETURN . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    ';'            shift, and go to state 56

    expr       go to state 57
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 13

   10 structbase: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 58


state 14

   84 constant: TOK_FALSE .

    $default  reduce using rule 84 (constant)


state 15

   83 constant: TOK_TRUE .

    $default  reduce using rule 83 (constant)


state 16

   85 constant: TOK_NULL .

    $default  reduce using rule 85 (constant)


state 17

   70 allocator: TOK_NEW . TOK_IDENT '(' ')'
   71          | TOK_NEW . TOK_STRING '(' expr ')'
   72          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 59
    TOK_IDENT   shift, and go to state 60
    TOK_TYPEID  shift, and go to state 22

    basetype  go to state 61


state 18

   19 basetype: TOK_IDENT .
   73 call: TOK_IDENT . '(' ')'
   75 callbase: TOK_IDENT . '(' expr
   77 variable: TOK_IDENT .

    '('  shift, and go to state 62

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_IDENT  reduce using rule 19 (basetype)
    $default   reduce using rule 77 (variable)


state 19

   80 constant: TOK_INTCON .

    $default  reduce using rule 80 (constant)


state 20

   81 constant: TOK_CHARCON .

    $default  reduce using rule 81 (constant)


state 21

   82 constant: TOK_STRINGCON .

    $default  reduce using rule 82 (constant)


state 22

   18 basetype: TOK_TYPEID .

    $default  reduce using rule 18 (basetype)


state 23

   57 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 63
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 24

   56 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 64
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 25

   53 unop: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 65
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 26

   54 unop: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 66
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 27

   55 unop: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 67
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 28

   50 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 68
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 29

   39 statement: ';' .

    $default  reduce using rule 39 (statement)


state 30

   29 block: '{' . '}'
   31 blockstart: '{' . statement
   32           | '{' .

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    '}'            shift, and go to state 69
    ';'            shift, and go to state 29
    '{'            shift, and go to state 30

    TOK_VOID       [reduce using rule 32 (blockstart)]
    TOK_BOOL       [reduce using rule 32 (blockstart)]
    TOK_CHAR       [reduce using rule 32 (blockstart)]
    TOK_INT        [reduce using rule 32 (blockstart)]
    TOK_STRING     [reduce using rule 32 (blockstart)]
    TOK_IF         [reduce using rule 32 (blockstart)]
    TOK_WHILE      [reduce using rule 32 (blockstart)]
    TOK_RETURN     [reduce using rule 32 (blockstart)]
    TOK_FALSE      [reduce using rule 32 (blockstart)]
    TOK_TRUE       [reduce using rule 32 (blockstart)]
    TOK_NULL       [reduce using rule 32 (blockstart)]
    TOK_NEW        [reduce using rule 32 (blockstart)]
    TOK_IDENT      [reduce using rule 32 (blockstart)]
    TOK_INTCON     [reduce using rule 32 (blockstart)]
    TOK_CHARCON    [reduce using rule 32 (blockstart)]
    TOK_STRINGCON  [reduce using rule 32 (blockstart)]
    TOK_TYPEID     [reduce using rule 32 (blockstart)]
    TOK_ORD        [reduce using rule 32 (blockstart)]
    TOK_CHR        [reduce using rule 32 (blockstart)]
    '+'            [reduce using rule 32 (blockstart)]
    '-'            [reduce using rule 32 (blockstart)]
    '!'            [reduce using rule 32 (blockstart)]
    '('            [reduce using rule 32 (blockstart)]
    '}'            [reduce using rule 32 (blockstart)]
    ';'            [reduce using rule 32 (blockstart)]
    '{'            [reduce using rule 32 (blockstart)]

    basetype    go to state 33
    identdecl   go to state 70
    block       go to state 36
    blockstart  go to state 37
    statement   go to state 71
    vardecl     go to state 39
    while       go to state 40
    ifelse      go to state 41
    return      go to state 42
    expr        go to state 43
    unop        go to state 44
    binop       go to state 45
    allocator   go to state 46
    call        go to state 47
    callbase    go to state 48
    variable    go to state 49
    constant    go to state 50


state 31

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 32

    8 structdef: structbase . '}'
    9 structbase: structbase . fielddecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 72
    TOK_TYPEID  shift, and go to state 22
    '}'         shift, and go to state 73

    fielddecl  go to state 74
    basetype   go to state 75


state 33

   26 identdecl: basetype . TOK_ARRAY TOK_IDENT
   27          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 76
    TOK_IDENT  shift, and go to state 77


state 34

    3 program: program function .

    $default  reduce using rule 3 (program)


state 35

   20 function: identdecl . funcstart ')' block
   21         | identdecl . funcstart ')' ';'
   22         | identdecl . '(' ')' block
   23         | identdecl . '(' ')' ';'
   40 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 78
    '('  shift, and go to state 79

    funcstart  go to state 80


state 36

   33 statement: block .

    $default  reduce using rule 33 (statement)


state 37

   28 block: blockstart . '}'
   30 blockstart: blockstart . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    '}'            shift, and go to state 81
    ';'            shift, and go to state 29
    '{'            shift, and go to state 30

    basetype    go to state 33
    identdecl   go to state 70
    block       go to state 36
    blockstart  go to state 37
    statement   go to state 82
    vardecl     go to state 39
    while       go to state 40
    ifelse      go to state 41
    return      go to state 42
    expr        go to state 43
    unop        go to state 44
    binop       go to state 45
    allocator   go to state 46
    call        go to state 47
    callbase    go to state 48
    variable    go to state 49
    constant    go to state 50


state 38

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 39

   34 statement: vardecl .

    $default  reduce using rule 34 (statement)


state 40

   35 statement: while .

    $default  reduce using rule 35 (statement)


state 41

   36 statement: ifelse .

    $default  reduce using rule 36 (statement)


state 42

   37 statement: return .

    $default  reduce using rule 37 (statement)


state 43

   38 statement: expr . ';'
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ';'     shift, and go to state 97


state 44

   46 expr: unop .

    $default  reduce using rule 46 (expr)


state 45

   47 expr: binop .

    $default  reduce using rule 47 (expr)


state 46

   48 expr: allocator .

    $default  reduce using rule 48 (expr)


state 47

   49 expr: call .

    $default  reduce using rule 49 (expr)


state 48

   74 call: callbase . ')'
   76 callbase: callbase . ',' expr

    ')'  shift, and go to state 98
    ','  shift, and go to state 99


state 49

   51 expr: variable .

    $default  reduce using rule 51 (expr)


state 50

   52 expr: constant .

    $default  reduce using rule 52 (expr)


state 51

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 52

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 53

   42 ifelse: TOK_IF '(' . expr ')' statement
   43       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 100
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 54

   41 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 101
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 55

   73 call: TOK_IDENT . '(' ')'
   75 callbase: TOK_IDENT . '(' expr
   77 variable: TOK_IDENT .

    '('  shift, and go to state 62

    $default  reduce using rule 77 (variable)


state 56

   44 return: TOK_RETURN ';' .

    $default  reduce using rule 44 (return)


state 57

   45 return: TOK_RETURN expr . ';'
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ';'     shift, and go to state 102


state 58

   10 structbase: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 103


state 59

   17 basetype: TOK_STRING .
   71 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 104

    $default  reduce using rule 17 (basetype)


state 60

   19 basetype: TOK_IDENT .
   70 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 105

    $default  reduce using rule 19 (basetype)


state 61

   72 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 106


state 62

   73 call: TOK_IDENT '(' . ')'
   75 callbase: TOK_IDENT '(' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    ')'            shift, and go to state 107

    expr       go to state 108
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 63

   57 unop: TOK_ORD expr .
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 57 (unop)


state 64

   56 unop: TOK_CHR expr .
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 56 (unop)


state 65

   53 unop: '+' expr .
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 53 (unop)


state 66

   54 unop: '-' expr .
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 54 (unop)


state 67

   55 unop: '!' expr .
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 55 (unop)


state 68

   50 expr: '(' expr . ')'
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ')'     shift, and go to state 109


state 69

   29 block: '{' '}' .

    $default  reduce using rule 29 (block)


state 70

   40 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 78


state 71

   31 blockstart: '{' statement .

    $default  reduce using rule 31 (blockstart)


state 72

   19 basetype: TOK_IDENT .

    $default  reduce using rule 19 (basetype)


state 73

    8 structdef: structbase '}' .

    $default  reduce using rule 8 (structdef)


state 74

    9 structbase: structbase fielddecl .

    $default  reduce using rule 9 (structbase)


state 75

   11 fielddecl: basetype . TOK_ARRAY TOK_IDENT ';'
   12          | basetype . TOK_IDENT ';'

    TOK_ARRAY  shift, and go to state 110
    TOK_IDENT  shift, and go to state 111


state 76

   26 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 112


state 77

   27 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 27 (identdecl)


state 78

   40 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 113
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 79

   22 function: identdecl '(' . ')' block
   23         | identdecl '(' . ')' ';'
   24 funcstart: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 72
    TOK_TYPEID  shift, and go to state 22
    ')'         shift, and go to state 114

    basetype   go to state 33
    identdecl  go to state 115


state 80

   20 function: identdecl funcstart . ')' block
   21         | identdecl funcstart . ')' ';'
   25 funcstart: funcstart . ',' identdecl

    ')'  shift, and go to state 116
    ','  shift, and go to state 117


state 81

   28 block: blockstart '}' .

    $default  reduce using rule 28 (block)


state 82

   30 blockstart: blockstart statement .

    $default  reduce using rule 30 (blockstart)


state 83

   68 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 118
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 84

   69 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 119
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 85

   64 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 120
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 86

   65 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 121
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 87

   66 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 122
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 88

   67 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 123
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 89

   62 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 124
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 90

   58 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 125
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 91

   59 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 126
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 92

   60 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 127
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 93

   61 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 128
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 94

   63 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 129
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 95

   79 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 130
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 96

   78 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 131


state 97

   38 statement: expr ';' .

    $default  reduce using rule 38 (statement)


state 98

   74 call: callbase ')' .

    $default  reduce using rule 74 (call)


state 99

   76 callbase: callbase ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 132
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 100

   42 ifelse: TOK_IF '(' expr . ')' statement
   43       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ')'     shift, and go to state 133


state 101

   41 while: TOK_WHILE '(' expr . ')' statement
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ')'     shift, and go to state 134


state 102

   45 return: TOK_RETURN expr ';' .

    $default  reduce using rule 45 (return)


state 103

   10 structbase: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 10 (structbase)


state 104

   71 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 135
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 105

   70 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 136


state 106

   72 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28

    expr       go to state 137
    unop       go to state 44
    binop      go to state 45
    allocator  go to state 46
    call       go to state 47
    callbase   go to state 48
    variable   go to state 49
    constant   go to state 50


state 107

   73 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 73 (call)


state 108

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   75 callbase: TOK_IDENT '(' expr .
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96

    $default  reduce using rule 75 (callbase)


state 109

   50 expr: '(' expr ')' .

    $default  reduce using rule 50 (expr)


state 110

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 138


state 111

   12 fielddecl: basetype TOK_IDENT . ';'

    ';'  shift, and go to state 139


state 112

   26 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


state 113

   40 vardecl: identdecl '=' expr . ';'
   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ';'     shift, and go to state 140


state 114

   22 function: identdecl '(' ')' . block
   23         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 141
    '{'  shift, and go to state 30

    block       go to state 142
    blockstart  go to state 37


state 115

   24 funcstart: '(' identdecl .

    $default  reduce using rule 24 (funcstart)


state 116

   20 function: identdecl funcstart ')' . block
   21         | identdecl funcstart ')' . ';'

    ';'  shift, and go to state 143
    '{'  shift, and go to state 30

    block       go to state 144
    blockstart  go to state 37


state 117

   25 funcstart: funcstart ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 72
    TOK_TYPEID  shift, and go to state 22

    basetype   go to state 33
    identdecl  go to state 145


state 118

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   68      | expr TOK_EQ expr .
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 68 (binop)


state 119

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   69      | expr TOK_NE expr .
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 69 (binop)


state 120

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   64      | expr TOK_LT expr .
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 64 (binop)


state 121

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   65      | expr TOK_LE expr .
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 65 (binop)


state 122

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   66      | expr TOK_GT expr .
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 66 (binop)


state 123

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   67      | expr TOK_GE expr .
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 67 (binop)


state 124

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   62      | expr '=' expr .
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96

    $default  reduce using rule 62 (binop)


state 125

   58 binop: expr . '+' expr
   58      | expr '+' expr .
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 58 (binop)


state 126

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   59      | expr '-' expr .
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94
    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 59 (binop)


state 127

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   60      | expr '*' expr .
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 60 (binop)


state 128

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   61      | expr '/' expr .
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 61 (binop)


state 129

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   63      | expr '%' expr .
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    '['  shift, and go to state 95
    '.'  shift, and go to state 96

    $default  reduce using rule 63 (binop)


state 130

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'
   79         | expr '[' expr . ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ']'     shift, and go to state 146


state 131

   78 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 78 (variable)


state 132

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   76 callbase: callbase ',' expr .
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96

    $default  reduce using rule 76 (callbase)


state 133

   42 ifelse: TOK_IF '(' expr ')' . statement
   43       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    ';'            shift, and go to state 29
    '{'            shift, and go to state 30

    basetype    go to state 33
    identdecl   go to state 70
    block       go to state 36
    blockstart  go to state 37
    statement   go to state 147
    vardecl     go to state 39
    while       go to state 40
    ifelse      go to state 41
    return      go to state 42
    expr        go to state 43
    unop        go to state 44
    binop       go to state 45
    allocator   go to state 46
    call        go to state 47
    callbase    go to state 48
    variable    go to state 49
    constant    go to state 50


state 134

   41 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    ';'            shift, and go to state 29
    '{'            shift, and go to state 30

    basetype    go to state 33
    identdecl   go to state 70
    block       go to state 36
    blockstart  go to state 37
    statement   go to state 148
    vardecl     go to state 39
    while       go to state 40
    ifelse      go to state 41
    return      go to state 42
    expr        go to state 43
    unop        go to state 44
    binop       go to state 45
    allocator   go to state 46
    call        go to state 47
    callbase    go to state 48
    variable    go to state 49
    constant    go to state 50


state 135

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   71 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ')'     shift, and go to state 149


state 136

   70 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 70 (allocator)


state 137

   58 binop: expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '=' expr
   63      | expr . '%' expr
   64      | expr . TOK_LT expr
   65      | expr . TOK_LE expr
   66      | expr . TOK_GT expr
   67      | expr . TOK_GE expr
   68      | expr . TOK_EQ expr
   69      | expr . TOK_NE expr
   72 allocator: TOK_NEW basetype '[' expr . ']'
   78 variable: expr . '.' TOK_IDENT
   79         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 83
    TOK_NE  shift, and go to state 84
    TOK_LT  shift, and go to state 85
    TOK_LE  shift, and go to state 86
    TOK_GT  shift, and go to state 87
    TOK_GE  shift, and go to state 88
    '='     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '%'     shift, and go to state 94
    '['     shift, and go to state 95
    '.'     shift, and go to state 96
    ']'     shift, and go to state 150


state 138

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT . ';'

    ';'  shift, and go to state 151


state 139

   12 fielddecl: basetype TOK_IDENT ';' .

    $default  reduce using rule 12 (fielddecl)


state 140

   40 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 40 (vardecl)


state 141

   23 function: identdecl '(' ')' ';' .

    $default  reduce using rule 23 (function)


state 142

   22 function: identdecl '(' ')' block .

    $default  reduce using rule 22 (function)


state 143

   21 function: identdecl funcstart ')' ';' .

    $default  reduce using rule 21 (function)


state 144

   20 function: identdecl funcstart ')' block .

    $default  reduce using rule 20 (function)


state 145

   25 funcstart: funcstart ',' identdecl .

    $default  reduce using rule 25 (funcstart)


state 146

   79 variable: expr '[' expr ']' .

    $default  reduce using rule 79 (variable)


state 147

   42 ifelse: TOK_IF '(' expr ')' statement .
   43       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 152

    $default  reduce using rule 42 (ifelse)


state 148

   41 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 41 (while)


state 149

   71 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 71 (allocator)


state 150

   72 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 72 (allocator)


state 151

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT ';' .

    $default  reduce using rule 11 (fielddecl)


state 152

   43 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 28
    ';'            shift, and go to state 29
    '{'            shift, and go to state 30

    basetype    go to state 33
    identdecl   go to state 70
    block       go to state 36
    blockstart  go to state 37
    statement   go to state 153
    vardecl     go to state 39
    while       go to state 40
    ifelse      go to state 41
    return      go to state 42
    expr        go to state 43
    unop        go to state 44
    binop       go to state 45
    allocator   go to state 46
    call        go to state 47
    callbase    go to state 48
    variable    go to state 49
    constant    go to state 50


state 153

   43 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 43 (ifelse)
